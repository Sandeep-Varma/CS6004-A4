trigger:
  - master
pr:
  - master
 
jobs:
  - job:
    displayName: 'x86-64 Windows'
    pool:
      vmImage: vs2017-win2016
    steps:
      - script: |
          mkdir build
        displayName: 'Create build directory'
 
      - script: |
          set PATH=C:\Program Files (x86)\Windows Kits\10\bin\10.0.16299.0\x64;%PATH%
          cmake .. -G "Visual Studio 15 2017 Win64" -C../cmake/caches/Windows.cmake .. -DOMR_DDR=0 -DOMR_TEST_COMPILER=ON -DOMR_JITBUILDER_TEST=ON
        displayName: 'Configure'
        workingDirectory: 'build'
 
      - script: |
          cmake --build . -- -maxCpuCount
        displayName: 'Build'
        workingDirectory: 'build'
 
      - script: |
          ctest -V -C Debug
        displayName: "Test"
        workingDirectory: 'build'
 
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*results.xml'
        displayName: 'Publish results'
 
  - job:
    displayName: 'x86-64 Linux'
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      CCACHE_DIR: $(Pipeline.Workspace)/ccache
    steps:
      - script: |
          sudo apt-get install -y ccache libelf-dev libdwarf-dev
        displayName: 'Install prerequisites'
 
      - script: |
          PARALLELISM=$(grep -c '^processor' /proc/cpuinfo)
          echo "Number of parallel jobs: $PARALLELISM"
          echo "##vso[task.setvariable variable=NUMBER_OF_PROCESSORS]$PARALLELISM"
          echo "##vso[task.prependpath]/usr/lib/ccache"
        displayName: 'Initialize environment'
       
      - script: |
          mkdir build
        displayName: 'Create build directory'
        
      - task: Cache@2
        inputs:
          key: 'ccache | "$(Agent.OS)" | azure-pipelines.cache'
          path: $(CCACHE_DIR)
        displayName: 'Save/Restore ccache'
 
      - script: |
          ccache -s -z
        displayName: 'Print cache stats'
 
      - script: |
          cmake -C ../cmake/caches/Travis.cmake ..
        displayName: 'Configure'
        workingDirectory: 'build'
 
      - script: |
          make -j$NUMBER_OF_PROCESSORS
        displayName: 'Build'
        workingDirectory: 'build'
 
      - script: |
          ccache -s -z
        displayName: 'Print cache stats'
 
      - script: |
          ctest -V -j$NUMBER_OF_PROCESSORS
        displayName: "Test"
        workingDirectory: 'build'
 
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*results.xml'
        displayName: 'Publish results'
 
  - job:
    displayName: 'x86-64 macOS'
    pool:
      vmImage: 'macOS-10.14'
    variables:
      CCACHE_DIR: $(Pipeline.Workspace)/ccache
    steps:
      - script: |
          brew install ccache
        displayName: 'Install prerequisites'
 
      - script: |
          sudo sysctl -w kern.maxproc=25000
          sudo sysctl -w kern.maxprocperuid=25000
         
          PARALLELISM=$(sysctl -a | grep machdep.cpu.core_count | cut -d ' ' -f 2)
          echo "Number of parallel jobs: $PARALLELISM"
          echo "##vso[task.setvariable variable=NUMBER_OF_PROCESSORS]$PARALLELISM"
          echo "##vso[task.prependpath]/usr/local/opt/ccache/libexec"
        displayName: 'Initialize environment'
 
      - script: |
          mkdir build
        displayName: 'Create build directory'
 
      - task: Cache@2
        inputs:
          key: 'ccache | "$(Agent.OS)" | azure-pipelines.cache'
          path: $(CCACHE_DIR)
        displayName: 'Save/Restore ccache'
 
      - script: |
          ccache -s -z
        displayName: 'Print cache stats'
 
      - script: |
          cmake -C ../cmake/caches/Travis.cmake ..
        displayName: 'Configure'
        workingDirectory: 'build'
 
      - script: |
          make -j$NUMBER_OF_PROCESSORS
        displayName: 'Build'
        workingDirectory: 'build'
 
      - script: |
          ccache -s -z
        displayName: 'Print cache stats'
 
      - script: |
          ctest -V -j$NUMBER_OF_PROCESSORS
        displayName: "Test"
        workingDirectory: 'build'
 
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/*results.xml'
        displayName: 'Publish results'
        
  - job:
    displayName: 'Linter'
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      CCACHE_DIR: $(Pipeline.Workspace)/ccache
      CLANG: clang++-3.8
      CXX: clang++-3.8
      CXX_PATH: clang++-3.8
      LLVM_CONFIG: llvm-config-3.8
      SPEC: linux_x86-64
      PLATFORM: amd64-linux64-gcc
    steps:
      - script: |
          sudo apt-get install -y ccache clang-3.8 libclang-3.8-dev llvm-3.8 llvm-3.8-dev
        displayName: 'Install prerequisites'
 
      - script: |
          PARALLELISM=$(grep -c '^processor' /proc/cpuinfo)
          echo "Number of parallel jobs: $PARALLELISM"
          echo "##vso[task.setvariable variable=NUMBER_OF_PROCESSORS]$PARALLELISM"
          echo "##vso[task.prependpath]/usr/lib/ccache"
        displayName: 'Initialize environment'
       
      - task: Cache@2
        inputs:
          key: 'ccache | "$(Agent.OS)" | azure-pipelines.cache'
          path: $(CCACHE_DIR)
        displayName: 'Save/Restore ccache'
 
      - script: |
          ccache -s -z
        displayName: 'Print cache stats'
 
      - script: |
          make -f run_configure.mk OMRGLUE=./example/glue RUN_LINT=yes RUN_BUILD=no HAS_AUTOCONF=1 all
        displayName: 'Configure'
 
      - script: |
          make -j$NUMBER_OF_PROCESSORS lint
        displayName: 'Run linter for x86'
        env:
          TARGET_ARCH: x
          TARGET_SUBARCH: amd64
          TARGET_BITS: 64
 
      - script: |
          make -j$NUMBER_OF_PROCESSORS lint
        displayName: 'Run linter for Power'
        env:
          TARGET_ARCH: p
          TARGET_BITS: 64
 
      - script: |
          make -j$NUMBER_OF_PROCESSORS lint
        displayName: 'Run linter for z/Architecture'
        env:
          TARGET_ARCH: z
          TARGET_BITS: 64
 
      - script: |
          ccache -s -z
        displayName: 'Print cache stats'
